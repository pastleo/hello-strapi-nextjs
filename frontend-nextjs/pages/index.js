import React, { useState, useRef, useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'

import { timeoutPromise, useData } from '../lib/utils';

import styles from '../styles/Home.module.css'

const LazyComp = React.lazy(async () => {
  console.log('LazyComp started');
  await timeoutPromise(2000);
  console.log('LazyComp ready');
  return {
    default: ({ hydrated }) => {
      const [didMount, setDidMount] = useState(false);
      useEffect(() => {
        hydrated.current.add(1);
        setDidMount(true);
      }, [])
      return <div>lazy comp{ didMount && ', didMount/interactive' }</div>
    },
  };
});

function SimpleSuspenseDemo({ id, hydrated }) {
  const [reader, dataProps] = useData(id, async () => {
    console.log(`fetcher starts in SimpleSuspenseDemo [${id}]`);
    //const time = 2000;
    const time = Math.floor(Math.random() * 3000);
    await timeoutPromise(time);
    console.log(`fetcher finished in SimpleSuspenseDemo [${id}] after ${time}`);
    return time;
  });
  useEffect(() => {
    hydrated.current.add(2);
  }, [])

  return <p {...dataProps}>SimpleSuspenseDemo [{ id }]: { reader() }</p>
};

export default function Home({ serverPropVal }) {
  const hydrated = useRef(new Set());
  useEffect(() => {
    hydrated.current.add(0);
  }, [])
  const [id, setId] = useState(0);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <h4>serverPropVal: { serverPropVal }</h4>
        <h4>id: { id }</h4>
        <button onClick={() => {
          // we need to wait until all hydration in suspense completed (because streaming SSR):
          if (hydrated.current.size < 3) return; // really, really bad idea...
          setId(id + 1);
        }}>id++</button>
        <React.Suspense fallback={<p>loading LazyComp...</p>}>
          <LazyComp hydrated={hydrated} />
        </React.Suspense>
        <React.Suspense fallback={<p>waiting for SimpleSuspenseDemo and data...</p>}>
          <SimpleSuspenseDemo id={id} hydrated={hydrated} />
        </React.Suspense>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getServerSideProps() {
  const serverPropVal = Math.floor(Math.random() * 3000);
  console.log('getServerSideProps', { serverPropVal });
  return {
    props: {
      serverPropVal,
    }
  }
}
