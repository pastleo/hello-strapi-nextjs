import { useState, useRef, useEffect, useCallback } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

export default function Home() {
  const [auth, updateAuth] = useLocalState('auth', { token: null });
  const [authError, receiveError] = useErrorMsg();
  const emailInput = useRef();
  const passwordInput = useRef();

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Hello Strapi & Nextjs
        </h1>

        <p className={styles.description}>
          { auth.token ? (
            <>
              { auth.email }
              <button onClick={() => {
                updateAuth({
                  token: null,
                });
              }}>Logout</button>
            </>
          ) : (
            <>
              <input ref={emailInput} type='text' placeholder='Email' />
              <input ref={passwordInput} type='password' placeholder='Password' />
              <button onClick={async () => {
                const response = await fetchAPI('/api/auth/local', {
                  method: 'POST',
                  body: JSON.stringify({
                    identifier: emailInput.current.value,
                    password: passwordInput.current.value,
                  })
                });
                if (response.error) return receiveError(response.error);

                updateAuth({
                  email: response.user.email,
                  token: response.jwt,
                });
              }}>Login</button>
              <button onClick={async () => {
                const response = await fetchAPI('/api/auth/local/register', {
                  method: 'POST',
                  body: JSON.stringify({
                    username: emailInput.current.value,
                    email: emailInput.current.value,
                    password: passwordInput.current.value,
                  })
                });
                if (response.error) return receiveError(response.error);

                updateAuth({
                  email: response.user.email,
                  token: response.jwt,
                });
              }}>Register</button>
              { authError && <>
                <br />
                <span style={{ color: 'red' }}>{ authError }</span>
              </> }
            </>
          ) }
        </p>

      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

function useLocalState(key, defaultValue) {
  const [state, setState] = useState(defaultValue);
  const updateState = useCallback((newState) => {
    localStorage.setItem(key, JSON.stringify(newState));
    setState(newState)
  }, []);

  useEffect(() => {
    const existingItemJSON = localStorage.getItem(key);
    if (existingItemJSON === null) return;

    try {
      setState(JSON.parse(existingItemJSON))
    } catch (jsonErr) {
      console.error(jsonErr);
    }
  }, []);

  return [state, updateState];
}

function useErrorMsg() {
  const [authError, setAuthError] = useState('');
  const receiveError = useCallback(error => {
    const errorMessages = [
      error.message,
      ...Object.entries(error.details).map(([key, err]) => `${key}: ${err.message}`)
    ];
    console.log({ errorMessages });
    setAuthError(errorMessages.join(', '))
  }, []);

  return [authError, receiveError];
}

async function fetchAPI(path, reqOptions = {}) {
  const { headers, ...options } = reqOptions;
  const res = await fetch([process.env.API_HOST, path].join(''), {
    headers: {
      'Content-Type': 'application/json',
      ...headers
    },
    ...options,
  });
  return {
    ok: res.ok,
    ...(await res.json()),
  };
}

function fetchAuthAPI(path, auth, reqOptions = {}) {
  const { headers, ...options } = reqOptions;
  return fetchAPI(path, {
    headers: {
      Authorization: `Bearer ${auth.token}`,
      ...headers
    },
    ...options,
  });
}
