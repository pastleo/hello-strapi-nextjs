import { useRef, useMemo, useEffect } from 'react';
import { SWRConfig } from 'swr';
import Head from 'next/head'
import Image from 'next/image'

import Todos from '../components/todos';
import Announcements from '../components/announcements';
import { announcementsQuery } from '../utils/queries';

import { fetchAPI, graphqlFetcher } from '../utils/api';
import { useLocalState, useErrorMsg } from '../utils/hooks';

import styles from '../styles/Home.module.css'

export async function getServerSideProps() {
  const announcementsResponse = await graphqlFetcher(announcementsQuery);

  return {
    props: {
      swrData: {
        [announcementsQuery]: announcementsResponse,
      },
    },
  }
}

export default function Home({ swrData }) {
  const hydrated = useRef(false);
  useEffect(() => {
    hydrated.current = true;
  }, []);

  const [auth, updateAuth] = useLocalState('auth', { token: null });

  const [authError, receiveError] = useErrorMsg();
  const emailInput = useRef();
  const passwordInput = useRef();

  const swrOptions = useMemo(() => ({
    fallback: swrData,
    fetcher: graphqlFetcher,
    isPaused: () => !hydrated.current, // prevent first page load of redundant request
  }), []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Hello Strapi & Nextjs
        </h1>

        <p className={styles.description}>
          { auth.token ? (
            <>
              { auth.email }
              <button onClick={() => {
                updateAuth({
                  token: null,
                });
              }}>Logout</button>
            </>
          ) : (
            <>
              <input ref={emailInput} type='text' placeholder='Email' />
              <input ref={passwordInput} type='password' placeholder='Password' />
              <button onClick={async () => {
                const response = await fetchAPI('/api/auth/local', {
                  method: 'POST',
                  body: JSON.stringify({
                    identifier: emailInput.current.value,
                    password: passwordInput.current.value,
                  })
                });
                if (response.error) return receiveError(response.error);

                updateAuth({
                  email: response.user.email,
                  token: response.jwt,
                });
              }}>Login</button>
              <button onClick={async () => {
                const response = await fetchAPI('/api/auth/local/register', {
                  method: 'POST',
                  body: JSON.stringify({
                    username: emailInput.current.value,
                    email: emailInput.current.value,
                    password: passwordInput.current.value,
                  })
                });
                if (response.error) return receiveError(response.error);

                updateAuth({
                  email: response.user.email,
                  token: response.jwt,
                });
              }}>Register</button>
              { authError && <>
                <br />
                <span style={{ color: 'red' }}>{ authError }</span>
              </> }
            </>
          ) }
        </p>

        <SWRConfig value={swrOptions}>
          <Announcements />
        </SWRConfig>

        { auth.token && <>
          <Todos auth={auth} />
        </> }

      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
